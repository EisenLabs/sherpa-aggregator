pub use uni_v2_facet::*;
/// This module was auto-generated with ethers-rs Abigen.
/// More information at: <https://github.com/gakonst/ethers-rs>
#[allow(
    clippy::enum_variant_names,
    clippy::too_many_arguments,
    clippy::upper_case_acronyms,
    clippy::type_complexity,
    dead_code,
    non_camel_case_types,
)]
pub mod uni_v2_facet {
    #[allow(deprecated)]
    fn __abi() -> ::ethers::core::abi::Abi {
        ::ethers::core::abi::ethabi::Contract {
            constructor: ::core::option::Option::None,
            functions: ::core::convert::From::from([
                (
                    ::std::borrow::ToOwned::to_owned("uniV2PoolNum"),
                    ::std::vec![
                        ::ethers::core::abi::ethabi::Function { name :
                        ::std::borrow::ToOwned::to_owned("uniV2PoolNum"), inputs :
                        ::std::vec![::ethers::core::abi::ethabi::Param { name :
                        ::std::borrow::ToOwned::to_owned("factory"), kind :
                        ::ethers::core::abi::ethabi::ParamType::Address, internal_type :
                        ::core::option::Option::Some(::std::borrow::ToOwned::to_owned("address")),
                        }], outputs : ::std::vec![::ethers::core::abi::ethabi::Param {
                        name : ::std::string::String::new(), kind :
                        ::ethers::core::abi::ethabi::ParamType::Uint(256usize),
                        internal_type :
                        ::core::option::Option::Some(::std::borrow::ToOwned::to_owned("uint256")),
                        }], constant : ::core::option::Option::None, state_mutability :
                        ::ethers::core::abi::ethabi::StateMutability::View, }
                    ],
                ),
                (
                    ::std::borrow::ToOwned::to_owned("uniV2PoolParams"),
                    ::std::vec![
                        ::ethers::core::abi::ethabi::Function { name :
                        ::std::borrow::ToOwned::to_owned("uniV2PoolParams"), inputs :
                        ::std::vec![::ethers::core::abi::ethabi::Param { name :
                        ::std::borrow::ToOwned::to_owned("pool"), kind :
                        ::ethers::core::abi::ethabi::ParamType::Address, internal_type :
                        ::core::option::Option::Some(::std::borrow::ToOwned::to_owned("address")),
                        }], outputs : ::std::vec![::ethers::core::abi::ethabi::Param {
                        name : ::std::string::String::new(), kind :
                        ::ethers::core::abi::ethabi::ParamType::Tuple(::std::vec![::ethers::core::abi::ethabi::ParamType::Array(::std::boxed::Box::new(::ethers::core::abi::ethabi::ParamType::Uint(256usize))),
                        ::ethers::core::abi::ethabi::ParamType::Address,
                        ::ethers::core::abi::ethabi::ParamType::Address,
                        ::ethers::core::abi::ethabi::ParamType::Array(::std::boxed::Box::new(::ethers::core::abi::ethabi::ParamType::Address))]),
                        internal_type :
                        ::core::option::Option::Some(::std::borrow::ToOwned::to_owned("struct IUniswapV2Viewer.UniV2PoolParamsResponse")),
                        }], constant : ::core::option::Option::None, state_mutability :
                        ::ethers::core::abi::ethabi::StateMutability::View, }
                    ],
                ),
                (
                    ::std::borrow::ToOwned::to_owned("uniV2PoolState"),
                    ::std::vec![
                        ::ethers::core::abi::ethabi::Function { name :
                        ::std::borrow::ToOwned::to_owned("uniV2PoolState"), inputs :
                        ::std::vec![::ethers::core::abi::ethabi::Param { name :
                        ::std::borrow::ToOwned::to_owned("pool"), kind :
                        ::ethers::core::abi::ethabi::ParamType::Address, internal_type :
                        ::core::option::Option::Some(::std::borrow::ToOwned::to_owned("address")),
                        }], outputs : ::std::vec![::ethers::core::abi::ethabi::Param {
                        name : ::std::string::String::new(), kind :
                        ::ethers::core::abi::ethabi::ParamType::Tuple(::std::vec![::ethers::core::abi::ethabi::ParamType::Array(::std::boxed::Box::new(::ethers::core::abi::ethabi::ParamType::Uint(256usize))),
                        ::ethers::core::abi::ethabi::ParamType::Uint(256usize),
                        ::ethers::core::abi::ethabi::ParamType::Bool]), internal_type :
                        ::core::option::Option::Some(::std::borrow::ToOwned::to_owned("struct IUniswapV2Viewer.UniV2PoolStateResponse")),
                        }], constant : ::core::option::Option::None, state_mutability :
                        ::ethers::core::abi::ethabi::StateMutability::View, }
                    ],
                ),
                (
                    ::std::borrow::ToOwned::to_owned("uniV2Pools"),
                    ::std::vec![
                        ::ethers::core::abi::ethabi::Function { name :
                        ::std::borrow::ToOwned::to_owned("uniV2Pools"), inputs :
                        ::std::vec![::ethers::core::abi::ethabi::Param { name :
                        ::std::borrow::ToOwned::to_owned("factory"), kind :
                        ::ethers::core::abi::ethabi::ParamType::Address, internal_type :
                        ::core::option::Option::Some(::std::borrow::ToOwned::to_owned("address")),
                        }, ::ethers::core::abi::ethabi::Param { name :
                        ::std::borrow::ToOwned::to_owned("start"), kind :
                        ::ethers::core::abi::ethabi::ParamType::Uint(256usize),
                        internal_type :
                        ::core::option::Option::Some(::std::borrow::ToOwned::to_owned("uint256")),
                        }, ::ethers::core::abi::ethabi::Param { name :
                        ::std::borrow::ToOwned::to_owned("end"), kind :
                        ::ethers::core::abi::ethabi::ParamType::Uint(256usize),
                        internal_type :
                        ::core::option::Option::Some(::std::borrow::ToOwned::to_owned("uint256")),
                        }], outputs : ::std::vec![::ethers::core::abi::ethabi::Param {
                        name : ::std::string::String::new(), kind :
                        ::ethers::core::abi::ethabi::ParamType::Array(::std::boxed::Box::new(::ethers::core::abi::ethabi::ParamType::Address)),
                        internal_type :
                        ::core::option::Option::Some(::std::borrow::ToOwned::to_owned("address[]")),
                        }], constant : ::core::option::Option::None, state_mutability :
                        ::ethers::core::abi::ethabi::StateMutability::View, }
                    ],
                ),
                (
                    ::std::borrow::ToOwned::to_owned("uniV2SwapExactInput"),
                    ::std::vec![
                        ::ethers::core::abi::ethabi::Function { name :
                        ::std::borrow::ToOwned::to_owned("uniV2SwapExactInput"), inputs :
                        ::std::vec![::ethers::core::abi::ethabi::Param { name :
                        ::std::borrow::ToOwned::to_owned("amountIn"), kind :
                        ::ethers::core::abi::ethabi::ParamType::Uint(256usize),
                        internal_type :
                        ::core::option::Option::Some(::std::borrow::ToOwned::to_owned("uint256")),
                        }, ::ethers::core::abi::ethabi::Param { name :
                        ::std::borrow::ToOwned::to_owned("router"), kind :
                        ::ethers::core::abi::ethabi::ParamType::Address, internal_type :
                        ::core::option::Option::Some(::std::borrow::ToOwned::to_owned("address")),
                        }, ::ethers::core::abi::ethabi::Param { name :
                        ::std::borrow::ToOwned::to_owned("path"), kind :
                        ::ethers::core::abi::ethabi::ParamType::Array(::std::boxed::Box::new(::ethers::core::abi::ethabi::ParamType::Address)),
                        internal_type :
                        ::core::option::Option::Some(::std::borrow::ToOwned::to_owned("address[]")),
                        }, ::ethers::core::abi::ethabi::Param { name :
                        ::std::borrow::ToOwned::to_owned("recipient"), kind :
                        ::ethers::core::abi::ethabi::ParamType::Address, internal_type :
                        ::core::option::Option::Some(::std::borrow::ToOwned::to_owned("Recipient")),
                        }, ::ethers::core::abi::ethabi::Param { name :
                        ::std::borrow::ToOwned::to_owned("payer"), kind :
                        ::ethers::core::abi::ethabi::ParamType::Address, internal_type :
                        ::core::option::Option::Some(::std::borrow::ToOwned::to_owned("Payer")),
                        }], outputs : ::std::vec![::ethers::core::abi::ethabi::Param {
                        name : ::std::borrow::ToOwned::to_owned("inputToken"), kind :
                        ::ethers::core::abi::ethabi::ParamType::Address, internal_type :
                        ::core::option::Option::Some(::std::borrow::ToOwned::to_owned("address")),
                        }, ::ethers::core::abi::ethabi::Param { name :
                        ::std::borrow::ToOwned::to_owned("outputToken"), kind :
                        ::ethers::core::abi::ethabi::ParamType::Address, internal_type :
                        ::core::option::Option::Some(::std::borrow::ToOwned::to_owned("address")),
                        }, ::ethers::core::abi::ethabi::Param { name :
                        ::std::borrow::ToOwned::to_owned("amountOut"), kind :
                        ::ethers::core::abi::ethabi::ParamType::Uint(256usize),
                        internal_type :
                        ::core::option::Option::Some(::std::borrow::ToOwned::to_owned("uint256")),
                        }], constant : ::core::option::Option::None, state_mutability :
                        ::ethers::core::abi::ethabi::StateMutability::Payable, }
                    ],
                ),
            ]),
            events: ::std::collections::BTreeMap::new(),
            errors: ::core::convert::From::from([
                (
                    ::std::borrow::ToOwned::to_owned("GenericError"),
                    ::std::vec![
                        ::ethers::core::abi::ethabi::AbiError { name :
                        ::std::borrow::ToOwned::to_owned("GenericError"), inputs :
                        ::std::vec![::ethers::core::abi::ethabi::Param { name :
                        ::std::borrow::ToOwned::to_owned("errorCode"), kind :
                        ::ethers::core::abi::ethabi::ParamType::Uint(256usize),
                        internal_type :
                        ::core::option::Option::Some(::std::borrow::ToOwned::to_owned("uint256")),
                        }], }
                    ],
                ),
                (
                    ::std::borrow::ToOwned::to_owned("UnsafeCast"),
                    ::std::vec![
                        ::ethers::core::abi::ethabi::AbiError { name :
                        ::std::borrow::ToOwned::to_owned("UnsafeCast"), inputs :
                        ::std::vec![], }
                    ],
                ),
            ]),
            receive: false,
            fallback: false,
        }
    }
    ///The parsed JSON ABI of the contract.
    pub static UNIV2FACET_ABI: ::ethers::contract::Lazy<::ethers::core::abi::Abi> = ::ethers::contract::Lazy::new(
        __abi,
    );
    #[rustfmt::skip]
    const __BYTECODE: &[u8] = b"`\x80\x80`@R4a\0\x16Wa\x1D\xF1\x90\x81a\0\x1C\x829\xF3[`\0\x80\xFD\xFE`\x80\x80`@R`\x046\x10\x15a\0\x13W`\0\x80\xFD[`\x005`\xE0\x1C\x90\x81cL\xAE!\xDC\x14a\x15{WP\x80cS\xE9\xD1l\x14a\x06\xCFW\x80cb\x18X/\x14a\x06\rW\x80ch4\x12\x85\x14a\x02eWc\x978\x9El\x14a\0VW`\0\x80\xFD[4a\x02\x18W` \x80\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFC6\x01\x12a\x02\x18Wa\0\x8Ea\x17\xA3V[\x90a\0\x97a\x19\xBAV[Ps\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFFa\0\xB5a\x19\xBAV[\x92`@Qa\0\xC2\x81a\x18$V[`\x02\x81R`@6\x85\x83\x017\x84R\x16\x91`@Q\x92\x7F\t\x02\xF1\xAC\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x84R``\x84`\x04\x81\x84Z\xFA\x90\x81\x15a\x02$W`\x04\x94\x84\x92`\0\x91`\0\x91a\x020W[Pa\x01C\x90\x85Q\x92m\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x92\x16a\x01;\x85a\x19\tV[R\x16\x91a\x18\xCDV[R`@Q\x94\x85\x80\x92\x7F\x18\x16\r\xDD\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x82RZ\xFA\x92\x83\x15a\x02$W`\0\x93a\x01\xEFW[P\x91`@\x83\x83a\x01\xBF\x95\x01\x92\x83Ra\x01\x97\x81Qa\x18\xCDV[Q\x15\x80\x15a\x01\xDDW[a\x01\xD2W[\x81Q\x94\x84\x86\x95\x86R``\x83Q\x91\x87\x01R`\x80\x86\x01\x90a\x18\x99V[\x92Q\x82\x85\x01R\x01Q\x15\x15``\x83\x01R\x03\x90\xF3[`\x01\x82\x82\x01Ra\x01\xA5V[Pa\x01\xE8\x81Qa\x19\tV[Q\x15a\x01\xA0V[\x92P\x81\x83\x81=\x83\x11a\x02\x1DW[a\x02\x06\x81\x83a\x18@V[\x81\x01\x03\x12a\x02\x18W\x91Q\x91`@a\x01\x7FV[`\0\x80\xFD[P=a\x01\xFCV[`@Q=`\0\x82>=\x90\xFD[a\x01C\x92Pa\x02V\x91P``=\x81\x11a\x02^W[a\x02N\x81\x83a\x18@V[\x81\x01\x90a\x1A\x06V[P\x90\x91a\x01\x18V[P=a\x02DV[4a\x02\x18W` \x80\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFC6\x01\x12a\x02\x18Wa\x02\x9Da\x17\xA3V[\x90a\x02\xA6a\x19\x83V[Pa\x02\xAFa\x19\x83V[\x90\x80\x82\x01s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x94\x16\x80\x82R`@Q\x7F\xC4Z\x01U\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R\x83\x81`\x04\x81\x85Z\xFA\x90\x81\x15a\x02$W`\0\x91a\x05\xF0W[P\x85`@\x86\x01\x91\x16\x81R`@Q\x91a\x03\"\x83a\x18$V[`\x02\x83R`@6\x86\x85\x017``\x86\x01\x92\x83R`@Q\x7F\r\xFE\x16\x81\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R\x85\x81`\x04\x81\x85Z\xFA\x91\x82\x15a\x02$W`\x04\x92\x87\x92`\0\x91a\x05\xD3W[P\x89a\x03\x82\x87Qa\x18\xCDV[\x91\x16\x90R`@Q\x92\x83\x80\x92\x7F\xD2\x12 \xA7\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x82RZ\xFA\x90\x81\x15a\x02$W`\0\x91a\x05\xB6W[P\x86a\x03\xCD\x84Qa\x19\tV[\x91\x16\x90R`@Q\x90`\x80\x82\x01\x91\x80\x83\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x84\x11\x17a\x05\x87W`\x04\x92`@R`\x03\x81R``6\x87\x83\x017\x86Ra\x04L\x87\x82Q\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16`\0R\x7F\x82WZ\xFF\xB1&\x0F\xF4\xD6,\x8D7\x16\xA5Z\xDB\xFBOH4\xD1\x7FL\xC7`\xB6|\xCC\xBC\xB7\xACj` R`@`\0 \x90V[Ta\x04W\x87Qa\x18\xCDV[Rb\x0FB@a\x04f\x87Qa\x19\tV[R\x84\x87\x82Q\x16`@Q\x93\x84\x80\x92\x7F\x01~~X\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x82RZ\xFA\x91\x82\x15a\x02$W\x87\x92\x83\x91`\0\x91a\x05ZW[P\x16a\x05NW`\xFF`\0\x95\x94\x95[\x16a\x04\xC4\x87Qa\x19\x19V[R\x81a\x04\xE1`@Q\x97\x86\x89RQ`\x80\x87\x8A\x01R`\xA0\x89\x01\x90a\x18\x99V[\x95Q\x16`@\x87\x01RQ\x16``\x85\x01RQ\x91\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x84\x82\x03\x01`\x80\x85\x01R\x81\x80\x84Q\x92\x83\x81R\x01\x93\x01\x91`\0[\x82\x81\x10a\x058W\x85\x85\x03\x86\xF3[\x83Q\x87\x16\x85R\x93\x81\x01\x93\x92\x81\x01\x92`\x01\x01a\x05+V[`\xFF`\x01\x95\x94\x95a\x04\xB9V[a\x05z\x91P\x87=\x89\x11a\x05\x80W[a\x05r\x81\x83a\x18@V[\x81\x01\x90a\x19JV[\x89a\x04\xABV[P=a\x05hV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\0R`A`\x04R`$`\0\xFD[a\x05\xCD\x91P\x85=\x87\x11a\x05\x80Wa\x05r\x81\x83a\x18@V[\x87a\x03\xC1V[a\x05\xEA\x91P\x83=\x85\x11a\x05\x80Wa\x05r\x81\x83a\x18@V[\x8Aa\x03vV[a\x06\x07\x91P\x84=\x86\x11a\x05\x80Wa\x05r\x81\x83a\x18@V[\x86a\x03\x0BV[4a\x02\x18W` \x80\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFC6\x01\x12a\x02\x18W`\x04\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFFa\x06]a\x17\xA3V[\x16`@Q\x92\x83\x80\x92\x7FWO+\xA3\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x82RZ\xFA\x90\x81\x15a\x02$W`\0\x91a\x06\xA2W[P`@Q\x90\x81R\xF3[\x90P\x81\x81\x81=\x83\x11a\x06\xC8W[a\x06\xB9\x81\x83a\x18@V[\x81\x01\x03\x12a\x02\x18WQ\x82a\x06\x99V[P=a\x06\xAFV[`\xA0\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFC6\x01\x12a\x02\x18Ws\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF`$5\x16`$5\x03a\x02\x18W`D5g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x02\x18W6`#\x82\x01\x12\x15a\x02\x18W\x80`\x04\x015a\x07E\x81a\x18\x81V[\x91a\x07S`@Q\x93\x84a\x18@V[\x81\x83R`$` \x84\x01\x92`\x05\x1B\x82\x01\x01\x906\x82\x11a\x02\x18W`$\x01\x91[\x81\x83\x10a\x15NW`d5s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x16\x85\x81\x83\x03a\x02\x18W`\x845\x92s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x84\x16\x80\x94\x03a\x02\x18Ws\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFFa\x07\xD9\x83a\x18\xCDV[Q\x16\x93`\x01\x81\x03a\x15\x0FWP3\x92[`\x01\x81\x03a\x14\xE2WPP3\x90[`$5s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16a\x11:W`\x03\x81Q\x10a\x0F\xC7Wa\x08\xBE\x92` s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFFa\x08?\x84a\x19\tV[Q\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFFa\x08_\x85a\x19\x19V[Q\x16\x90`@Q\x80\x80\x98\x81\x94\x7F\xE6\xA49\x05\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x83R\x8B`\x04\x84\x01\x90` \x90\x93\x92\x93`@\x83\x01\x94s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x92\x16\x84R\x16\x91\x01RV[\x03\x91Z\xFA\x93\x84\x15a\x02$W`\0\x94a\x11\x19W[P`\x045\x80a\x10\xF0W[PP\x80Q\x80\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x01\x11a\x0E\xE1Wa\tL\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFFs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x92\x96\x93\x96\x01\x86a\x19)V[Q\x16\x90a\tos\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x84\x16\x83a\x1C\xFFV[\x93\x94a\t\xBAs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFFa\t\x92\x83a\x18\xCDV[Q\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFFa\t\xB2\x84a\x19\x19V[Q\x16\x90a\x1A\x88V[P\x92\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFD\x82Q\x01\x92`\0\x94[\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x84Q\x01\x86\x10\x15a\x10^Ws\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFFa\n/\x87\x86a\x19)V[Q\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFFa\nS`\x02\x89\x01\x87a\x19)V[Q\x16\x90s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF``\x8C`\x04`@Q\x80\x94\x81\x93\x7F\t\x02\xF1\xAC\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x83R\x16Z\xFA\x90\x81\x15a\x02$W`\0\x90`\0\x92a\x10;W[Pm\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x91\x82\x16\x91\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x85\x16\x83\x03a\x105W[`@Q\x7Fp\xA0\x821\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81Rs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x8E\x16`\x04\x82\x01R` \x81`$\x81\x87Z\xFA\x80\x15a\x02$W\x82\x91`\0\x91a\x10\0W[P\x03s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFFa\x0Ba`\x01\x8D\x01\x8Ba\x19)V[Q\x16\x91\x80\x15\x91\x82\x80\x15a\x0F\xF8W[a\x0F\xC7W`\xFFa\x0C\x08a\x0B\xC1\x86s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16`\0R\x7F\x82WZ\xFF\xB1&\x0F\xF4\xD6,\x8D7\x16\xA5Z\xDB\xFBOH4\xD1\x7FL\xC7`\xB6|\xCC\xBC\xB7\xACj` R`@`\0 \x90V[T\x95s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16`\0R\x7F\x82WZ\xFF\xB1&\x0F\xF4\xD6,\x8D7\x16\xA5Z\xDB\xFBOH4\xD1\x7FL\xC7`\xB6|\xCC\xBC\xB7\xACi` R`@`\0 \x90V[T\x16\x15a\x0F\x96Wa\x03\xE8\x93\x84\x81\x06a\x0F\x10W\x84\x90\x04\x84\x03\x90\x84\x82\x11a\x0E\xE1Wa\x0C;\x91a\x0C4\x91a\x1AuV[\x80\x95a\x1AuV[\x91\x81\x84\x81\x02\x04\x84\x14\x17\x15a\x0E\xE1Ws\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x93a\x0Cs\x93a\x0Cm\x92\x02a\x19vV[\x90a\x1A<V[\x93[\x16\x03a\x0E\xD9W`\0\x91\x99[\x86\x88\x10\x15a\x0E\xB9Wa\r>` s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFFa\x0C\xAF`\x03\x8C\x01\x8Aa\x19)V[Q\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFFa\x0C\xD3`\x04\x8D\x01\x8Ba\x19)V[Q\x16\x90a\x0C\xE0\x82\x87a\x1A\x88V[P\x95`@Q\x80\x95\x81\x94\x82\x93\x7F\xE6\xA49\x05\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x84R`\x04\x84\x01\x90` \x90\x93\x92\x93`@\x83\x01\x94s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x92\x16\x84R\x16\x91\x01RV[\x03\x91Z\xFA\x90\x81\x15a\x02$W`\0\x91a\x0E\x9AW[P\x91[\x9A`@Q\x90\x81` \x81\x01\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF` \x84\x01\x11\x17a\x05\x87W` \x82\x01`@R`\0\x82Rs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x16;\x15a\x02\x18W\x93\x90`@Q\x94\x85\x92\x7F\x02,\r\x9F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x84R`\x04\x84\x01R`$\x83\x01Rs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x84\x16`D\x83\x01R`\x80`d\x83\x01R\x80Q\x90\x81`\x84\x84\x01R`\0[\x82\x81\x10a\x0E\x82WPP\x91\x81`\0s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x95\x83\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0`\x1F`\xA4\x93\x86\x85\x82\x86\x01\x01R\x01\x16\x81\x01\x03\x01\x93\x16Z\xF1\x91\x82\x15a\x02$W`\x02\x92a\x0EsW[P\x95\x01\x94\x97a\t\xE5V[a\x0E|\x90a\x18\x10V[\x8Aa\x0EiV[` \x82\x82\x01\x81\x01Q`\xA4\x89\x84\x01\x01R\x87\x94P\x01a\r\xFEV[a\x0E\xB3\x91P` =` \x11a\x05\x80Wa\x05r\x81\x83a\x18@V[\x8Ca\rQV[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x89\x16\x91P`\0a\rTV[`\0\x99a\x0C\x80V[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\0R`\x11`\x04R`$`\0\xFD[\x93P`d\x84\x06a\x0FwW`da'\x10\x94\x04\x84\x03\x90\x84\x82\x11a\x0E\xE1Wa\x0F?\x91a\x0F8\x91a\x1AuV[\x94\x85a\x1AuV[\x91\x81\x84\x81\x02\x04\x84\x14\x17\x15a\x0E\xE1Ws\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x93a\x0Fq\x93a\x0Cm\x92\x02a\x19vV[\x93a\x0CuV[`\nb\x01\x86\xA0\x94\x04\x84\x03\x90\x84\x82\x11a\x0E\xE1Wa\x0F?\x91a\x0F8\x91a\x1AuV[`$`@Q\x7F\x94\x8A\xC5\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R` `\x04\x82\x01R\xFD[`$`@Q\x7F\x94\x8A\xC5\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`+`\x04\x82\x01R\xFD[P\x84\x15a\x0BoV[\x91PP` \x81=` \x11a\x10-W[\x81a\x10\x1C` \x93\x83a\x18@V[\x81\x01\x03\x12a\x02\x18W\x81\x90Q\x8Fa\x0B=V[=\x91Pa\x10\x0FV[\x90a\n\xE2V[\x90Pa\x10V\x91P``=``\x11a\x02^Wa\x02N\x81\x83a\x18@V[P\x90\x8Da\n\xAFV[P\x95\x93P\x95PPPa\x10\x89s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFFa\x10\x8E\x93\x16\x85a\x1C\xFFV[a\x19=V[\x80\x15a\x10\xBFWs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF``\x93`@Q\x93\x84R\x16` \x83\x01R`@\x82\x01R\xF3[`$`@Q\x7F\x94\x8A\xC5\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`0`\x04\x82\x01R\xFD[a\x11\x12\x91s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x86\x16\x90\x87a\x1A\xB0V[\x84\x80a\x08\xDBV[a\x113\x91\x94P` =` \x11a\x05\x80Wa\x05r\x81\x83a\x18@V[\x92\x85a\x08\xD1V[\x90\x92\x91`\x045a\x14\xCCW[P`\xFFa\x11\x93`$5s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16`\0R\x7F\x82WZ\xFF\xB1&\x0F\xF4\xD6,\x8D7\x16\xA5Z\xDB\xFBOH4\xD1\x7FL\xC7`\xB6|\xCC\xBC\xB7\xACi` R`@`\0 \x90V[T\x16\x15a\x0F\x96Wa\x11\xA3\x82a\x1D\x1FV[\x15a\x13\x93W[\x80Q\x90\x81\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x01\x11a\x0E\xE1Wa\x12k`\0\x91s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFFa\x12\x1D\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x96\x01\x83a\x19)V[Q\x16\x95`@Q\x94\x85\x93\x84\x93\x7F8\xED\x179\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x85R`\x045`\x04\x86\x01R`\x01`$\x86\x01R`\xA0`D\x86\x01R`\xA4\x85\x01\x90a\x17\xC6V[\x91\x16`d\x83\x01R\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF`\x84\x83\x01R\x03\x81\x83s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF`$5\x16Z\xF1\x90\x81\x15a\x02$W`\0\x91a\x13\x01W[P\x80Q\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x01\x90\x81\x11a\x0E\xE1Wa\x12\xFB\x91a\x19)V[Qa\x10\x8EV[\x90P=\x80`\0\x83>a\x13\x13\x81\x83a\x18@V[\x81\x01\x90` \x81\x83\x03\x12a\x02\x18W\x80Q\x90g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11a\x02\x18W\x01\x90\x80`\x1F\x83\x01\x12\x15a\x02\x18W\x81Qa\x13J\x81a\x18\x81V[\x92a\x13X`@Q\x94\x85a\x18@V[\x81\x84R` \x80\x85\x01\x92`\x05\x1B\x82\x01\x01\x92\x83\x11a\x02\x18W` \x01\x90[\x82\x82\x10a\x13\x83WPPP\x83a\x12\xC5V[\x81Q\x81R` \x91\x82\x01\x91\x01a\x13sV[`@Q\x7F\xDDb\xED>\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R0`\x04\x82\x01R`$\x805s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90\x82\x01R` \x81`D\x81\x86Z\xFA\x80\x15a\x02$Wa\x14\xA1W[P`$5`\x14R\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80`4Ro\t^\xA7\xB3\0\0\0\0\0\0\0\0\0\0\0\0\x80`\0R` `\0`D`\x10\x82\x88Z\xF1=\x15`\x01`\0Q\x14\x17\x16\x15a\x14ZW[PP`\0`4Ra\x11\xA9V[`\0`4R`\0R`\0\x80`D`\x10\x82\x87Z\xF1P`4R` `\0`D`\x10\x82\x86Z\xF1=\x15`\x01`\0Q\x14\x17\x16\x15a\x14\x93W\x83\x80a\x14NV[c>?\x8Fs`\0R`\x04`\x1C\xFD[` \x90\x81=\x83\x11a\x14\xC5W[a\x14\xB7\x81\x83a\x18@V[\x81\x01\x03\x12a\x02\x18W\x83a\x13\xF1V[P=a\x14\xADV[a\x14\xDC\x90`\x045\x900\x90\x85a\x1A\xB0V[\x83a\x11EV[`\x02\x81\x03a\x14\xF3WPP0\x90a\x07\xF5V[a\x14\xFC\x90a\x1D\x1FV[\x15a\x15\tWP3\x90a\x07\xF5V[\x90a\x07\xF5V[`\x02\x03a\x15\x1DW0\x92a\x07\xE8V[`$`@Q\x7F\x94\x8A\xC5\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`&`\x04\x82\x01R\xFD[\x825s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x16\x81\x03a\x02\x18W\x81R` \x92\x83\x01\x92\x01a\x07pV[4a\x02\x18W``\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFC6\x01\x12a\x02\x18Wa\x15\xB2a\x17\xA3V[\x90`$\x805\x92`D5s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x92\x16\x90\x7FWO+\xA3\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x85R` \x94\x85\x81`\x04\x81\x86Z\xFA\x80\x15a\x02$W\x87\x91`\0\x91a\x17pW[P\x91\x82a\x16&\x93\x82\x11a\x17hW[Pa\x19=V[\x91a\x160\x83a\x18\x81V[\x95a\x16>`@Q\x97\x88a\x18@V[\x83\x87R\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0a\x16k\x85a\x18\x81V[\x016\x87\x89\x017`\0[\x84\x81\x10a\x16\x92W`@Q\x87\x81R\x80a\x16\x8E\x81\x8A\x01\x8Ba\x17\xC6V[\x03\x90\xF3[a\x16\x9C\x81\x83a\x19vV[`@Q\x90\x7F\x1E=\xD1\x8B\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x82R`\x04\x82\x01R\x87\x81\x88\x81\x88Z\xFA\x90\x81\x15a\x02$W`\0\x91a\x17KW[P\x83a\x16\xEA\x83\x8Ba\x19)V[\x91\x16\x90R\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x14a\x17\x1DW`\x01\x01a\x16tV[\x85\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\0R`\x11`\x04R`\0\xFD[a\x17b\x91P\x88=\x8A\x11a\x05\x80Wa\x05r\x81\x83a\x18@V[\x89a\x16\xDEV[\x90P\x88a\x16 V[\x80\x92P\x87\x80\x92P=\x83\x11a\x17\x9CW[a\x17\x89\x81\x83a\x18@V[\x81\x01\x03\x12a\x02\x18WQ\x86\x90a\x16&a\x16\x12V[P=a\x17\x7FV[`\x045\x90s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x16\x82\x03a\x02\x18WV[\x90\x81Q\x80\x82R` \x80\x80\x93\x01\x93\x01\x91`\0[\x82\x81\x10a\x17\xE6WPPPP\x90V[\x83Qs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x85R\x93\x81\x01\x93\x92\x81\x01\x92`\x01\x01a\x17\xD8V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x05\x87W`@RV[``\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x05\x87W`@RV[\x90`\x1F\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x91\x01\x16\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x05\x87W`@RV[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x05\x87W`\x05\x1B` \x01\x90V[\x90\x81Q\x80\x82R` \x80\x80\x93\x01\x93\x01\x91`\0[\x82\x81\x10a\x18\xB9WPPPP\x90V[\x83Q\x85R\x93\x81\x01\x93\x92\x81\x01\x92`\x01\x01a\x18\xABV[\x80Q\x15a\x18\xDAW` \x01\x90V[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\0R`2`\x04R`$`\0\xFD[\x80Q`\x01\x10\x15a\x18\xDAW`@\x01\x90V[\x80Q`\x02\x10\x15a\x18\xDAW``\x01\x90V[\x80Q\x82\x10\x15a\x18\xDAW` \x91`\x05\x1B\x01\x01\x90V[\x91\x90\x82\x03\x91\x82\x11a\x0E\xE1WV[\x90\x81` \x91\x03\x12a\x02\x18WQs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x16\x81\x03a\x02\x18W\x90V[\x91\x90\x82\x01\x80\x92\x11a\x0E\xE1WV[`@Q\x90`\x80\x82\x01\x82\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x05\x87W`@R``\x80\x83\x81\x81R`\0` \x82\x01R`\0`@\x82\x01R\x01RV[`@Q\x90``\x82\x01\x82\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x05\x87W`@R`\0`@\x83``\x81R\x82` \x82\x01R\x01RV[Q\x90m\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x16\x82\x03a\x02\x18WV[\x90\x81``\x91\x03\x12a\x02\x18Wa\x1A\x1A\x81a\x19\xEBV[\x91`@a\x1A)` \x84\x01a\x19\xEBV[\x92\x01Qc\xFF\xFF\xFF\xFF\x81\x16\x81\x03a\x02\x18W\x90V[\x81\x15a\x1AFW\x04\x90V[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\0R`\x12`\x04R`$`\0\xFD[\x81\x81\x02\x92\x91\x81\x15\x91\x84\x04\x14\x17\x15a\x0E\xE1WV[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x81\x16\x90\x82\x16\x10\x15a\x1A\xACW\x91V[\x90\x91V[\x92\x91\x90s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x82\x160\x03a\x1A\xDEWPPa\x1A\xDC\x92a\x1A\xF2V[V[a\x1A\xEBa\x1A\xDC\x95\x94a\x1DpV[\x16\x92a\x1B\xC6V[\x90s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x900\x82\x14a\x1B\xC1Wa\x1B\x1A\x81a\x1D\x1FV[\x15a\x1B>WP`\0\x80\x80\x93Z\x93Z\xF1\x15a\x1B0WV[c\xB1-\x13\xEB`\0R`\x04`\x1C\xFD[\x82` \x92\x7F\x80\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\x10\x95\x14a\x1B\xAFW[`\x14R`4R`D`\0\x93\x84\x80\x93o\xA9\x05\x9C\xBB\0\0\0\0\0\0\0\0\0\0\0\0\x82RZ\xF1=\x15`\x01\x83Q\x14\x17\x16\x15a\x1B\xA2W`4RV[c\x90\xB8\xEC\x18\x90R`\x04`\x1C\xFD[\x90Pa\x1B\xBB0\x83a\x1C\xD0V[\x90a\x1BlV[PPPV[\x91s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x90\x81\x16\x91\x16\x81\x81\x14a\x1B\xF7Wa\x1B\xF1\x83a\x1D\x1FV[\x15a\x1B\xFDW[PPPPV[a\x1C\ta\x1C\x0F\x94a\x1DpV[\x92a\x1C\x18V[8\x80\x80\x80a\x1B\xF7V[\x91s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x80\x92\x16\x92\x16\x82\x81\x14a\x1C\xC9W\x81\x7Fj+3\x91\\\x87\xEB\xBD.zGR\x0F\xE4\xAA\xA6\xF0\xE1\x8E\xF6\xBD\xEB\xD6I\x15\xD7\xAE\xCE\xD0\x8DD\x81T\x16\x93\x84;\x15a\x02\x18W`\0\x94\x83\x86\x92`\x84\x95`@Q\x99\x8A\x98\x89\x97\x7F6\xC7\x85\x16\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x89R`\x04\x89\x01R`$\x88\x01R\x16`D\x86\x01R\x16`d\x84\x01RZ\xF1\x80\x15a\x02$Wa\x1C\xC0WPV[a\x1A\xDC\x90a\x18\x10V[PPPPPV[`$`\x10` \x93\x92\x84\x93`\x14Rop\xA0\x821\0\0\0\0\0\0\0\0\0\0\0\0`\0RZ\xFA`\x1F=\x11\x16` Q\x02\x90V[a\x1D\x08\x81a\x1D\x1FV[\x15a\x1D\x12WP1\x90V[\x90a\x1D\x1C\x91a\x1C\xD0V[\x90V[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xEE\xEE\xEE\xEE\xEE\xEE\xEE\xEE\xEE\xEE\xEE\xEE\xEE\xEE\xEE\xEE\xEE\xEE\xEE\xEE\x81\x14\x90\x81\x15a\x1DdW[\x81\x15a\x1D^WP\x90V[\x90P\x15\x90V[a\x10\x10\x81\x14\x91Pa\x1DTV[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x90\x81\x81\x11a\x1D\x91W\x16\x90V[`\x04`@Q\x7F\xC4\xBD\x89\xA9\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R\xFD\xFE\xA2dipfsX\"\x12 \x08\xFASiZ\xB0\xD7\xCA\x8CU{\xE6\x85\x95\x8B'\x9A\xBC+(.\x0CkF\x08h\x81\xC0i\x8E\"4dsolcC\0\x08\x13\x003";
    /// The bytecode of the contract.
    pub static UNIV2FACET_BYTECODE: ::ethers::core::types::Bytes = ::ethers::core::types::Bytes::from_static(
        __BYTECODE,
    );
    #[rustfmt::skip]
    const __DEPLOYED_BYTECODE: &[u8] = b"`\x80\x80`@R`\x046\x10\x15a\0\x13W`\0\x80\xFD[`\x005`\xE0\x1C\x90\x81cL\xAE!\xDC\x14a\x15{WP\x80cS\xE9\xD1l\x14a\x06\xCFW\x80cb\x18X/\x14a\x06\rW\x80ch4\x12\x85\x14a\x02eWc\x978\x9El\x14a\0VW`\0\x80\xFD[4a\x02\x18W` \x80\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFC6\x01\x12a\x02\x18Wa\0\x8Ea\x17\xA3V[\x90a\0\x97a\x19\xBAV[Ps\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFFa\0\xB5a\x19\xBAV[\x92`@Qa\0\xC2\x81a\x18$V[`\x02\x81R`@6\x85\x83\x017\x84R\x16\x91`@Q\x92\x7F\t\x02\xF1\xAC\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x84R``\x84`\x04\x81\x84Z\xFA\x90\x81\x15a\x02$W`\x04\x94\x84\x92`\0\x91`\0\x91a\x020W[Pa\x01C\x90\x85Q\x92m\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x92\x16a\x01;\x85a\x19\tV[R\x16\x91a\x18\xCDV[R`@Q\x94\x85\x80\x92\x7F\x18\x16\r\xDD\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x82RZ\xFA\x92\x83\x15a\x02$W`\0\x93a\x01\xEFW[P\x91`@\x83\x83a\x01\xBF\x95\x01\x92\x83Ra\x01\x97\x81Qa\x18\xCDV[Q\x15\x80\x15a\x01\xDDW[a\x01\xD2W[\x81Q\x94\x84\x86\x95\x86R``\x83Q\x91\x87\x01R`\x80\x86\x01\x90a\x18\x99V[\x92Q\x82\x85\x01R\x01Q\x15\x15``\x83\x01R\x03\x90\xF3[`\x01\x82\x82\x01Ra\x01\xA5V[Pa\x01\xE8\x81Qa\x19\tV[Q\x15a\x01\xA0V[\x92P\x81\x83\x81=\x83\x11a\x02\x1DW[a\x02\x06\x81\x83a\x18@V[\x81\x01\x03\x12a\x02\x18W\x91Q\x91`@a\x01\x7FV[`\0\x80\xFD[P=a\x01\xFCV[`@Q=`\0\x82>=\x90\xFD[a\x01C\x92Pa\x02V\x91P``=\x81\x11a\x02^W[a\x02N\x81\x83a\x18@V[\x81\x01\x90a\x1A\x06V[P\x90\x91a\x01\x18V[P=a\x02DV[4a\x02\x18W` \x80\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFC6\x01\x12a\x02\x18Wa\x02\x9Da\x17\xA3V[\x90a\x02\xA6a\x19\x83V[Pa\x02\xAFa\x19\x83V[\x90\x80\x82\x01s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x94\x16\x80\x82R`@Q\x7F\xC4Z\x01U\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R\x83\x81`\x04\x81\x85Z\xFA\x90\x81\x15a\x02$W`\0\x91a\x05\xF0W[P\x85`@\x86\x01\x91\x16\x81R`@Q\x91a\x03\"\x83a\x18$V[`\x02\x83R`@6\x86\x85\x017``\x86\x01\x92\x83R`@Q\x7F\r\xFE\x16\x81\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R\x85\x81`\x04\x81\x85Z\xFA\x91\x82\x15a\x02$W`\x04\x92\x87\x92`\0\x91a\x05\xD3W[P\x89a\x03\x82\x87Qa\x18\xCDV[\x91\x16\x90R`@Q\x92\x83\x80\x92\x7F\xD2\x12 \xA7\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x82RZ\xFA\x90\x81\x15a\x02$W`\0\x91a\x05\xB6W[P\x86a\x03\xCD\x84Qa\x19\tV[\x91\x16\x90R`@Q\x90`\x80\x82\x01\x91\x80\x83\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x84\x11\x17a\x05\x87W`\x04\x92`@R`\x03\x81R``6\x87\x83\x017\x86Ra\x04L\x87\x82Q\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16`\0R\x7F\x82WZ\xFF\xB1&\x0F\xF4\xD6,\x8D7\x16\xA5Z\xDB\xFBOH4\xD1\x7FL\xC7`\xB6|\xCC\xBC\xB7\xACj` R`@`\0 \x90V[Ta\x04W\x87Qa\x18\xCDV[Rb\x0FB@a\x04f\x87Qa\x19\tV[R\x84\x87\x82Q\x16`@Q\x93\x84\x80\x92\x7F\x01~~X\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x82RZ\xFA\x91\x82\x15a\x02$W\x87\x92\x83\x91`\0\x91a\x05ZW[P\x16a\x05NW`\xFF`\0\x95\x94\x95[\x16a\x04\xC4\x87Qa\x19\x19V[R\x81a\x04\xE1`@Q\x97\x86\x89RQ`\x80\x87\x8A\x01R`\xA0\x89\x01\x90a\x18\x99V[\x95Q\x16`@\x87\x01RQ\x16``\x85\x01RQ\x91\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x84\x82\x03\x01`\x80\x85\x01R\x81\x80\x84Q\x92\x83\x81R\x01\x93\x01\x91`\0[\x82\x81\x10a\x058W\x85\x85\x03\x86\xF3[\x83Q\x87\x16\x85R\x93\x81\x01\x93\x92\x81\x01\x92`\x01\x01a\x05+V[`\xFF`\x01\x95\x94\x95a\x04\xB9V[a\x05z\x91P\x87=\x89\x11a\x05\x80W[a\x05r\x81\x83a\x18@V[\x81\x01\x90a\x19JV[\x89a\x04\xABV[P=a\x05hV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\0R`A`\x04R`$`\0\xFD[a\x05\xCD\x91P\x85=\x87\x11a\x05\x80Wa\x05r\x81\x83a\x18@V[\x87a\x03\xC1V[a\x05\xEA\x91P\x83=\x85\x11a\x05\x80Wa\x05r\x81\x83a\x18@V[\x8Aa\x03vV[a\x06\x07\x91P\x84=\x86\x11a\x05\x80Wa\x05r\x81\x83a\x18@V[\x86a\x03\x0BV[4a\x02\x18W` \x80\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFC6\x01\x12a\x02\x18W`\x04\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFFa\x06]a\x17\xA3V[\x16`@Q\x92\x83\x80\x92\x7FWO+\xA3\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x82RZ\xFA\x90\x81\x15a\x02$W`\0\x91a\x06\xA2W[P`@Q\x90\x81R\xF3[\x90P\x81\x81\x81=\x83\x11a\x06\xC8W[a\x06\xB9\x81\x83a\x18@V[\x81\x01\x03\x12a\x02\x18WQ\x82a\x06\x99V[P=a\x06\xAFV[`\xA0\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFC6\x01\x12a\x02\x18Ws\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF`$5\x16`$5\x03a\x02\x18W`D5g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x02\x18W6`#\x82\x01\x12\x15a\x02\x18W\x80`\x04\x015a\x07E\x81a\x18\x81V[\x91a\x07S`@Q\x93\x84a\x18@V[\x81\x83R`$` \x84\x01\x92`\x05\x1B\x82\x01\x01\x906\x82\x11a\x02\x18W`$\x01\x91[\x81\x83\x10a\x15NW`d5s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x16\x85\x81\x83\x03a\x02\x18W`\x845\x92s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x84\x16\x80\x94\x03a\x02\x18Ws\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFFa\x07\xD9\x83a\x18\xCDV[Q\x16\x93`\x01\x81\x03a\x15\x0FWP3\x92[`\x01\x81\x03a\x14\xE2WPP3\x90[`$5s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16a\x11:W`\x03\x81Q\x10a\x0F\xC7Wa\x08\xBE\x92` s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFFa\x08?\x84a\x19\tV[Q\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFFa\x08_\x85a\x19\x19V[Q\x16\x90`@Q\x80\x80\x98\x81\x94\x7F\xE6\xA49\x05\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x83R\x8B`\x04\x84\x01\x90` \x90\x93\x92\x93`@\x83\x01\x94s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x92\x16\x84R\x16\x91\x01RV[\x03\x91Z\xFA\x93\x84\x15a\x02$W`\0\x94a\x11\x19W[P`\x045\x80a\x10\xF0W[PP\x80Q\x80\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x01\x11a\x0E\xE1Wa\tL\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFFs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x92\x96\x93\x96\x01\x86a\x19)V[Q\x16\x90a\tos\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x84\x16\x83a\x1C\xFFV[\x93\x94a\t\xBAs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFFa\t\x92\x83a\x18\xCDV[Q\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFFa\t\xB2\x84a\x19\x19V[Q\x16\x90a\x1A\x88V[P\x92\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFD\x82Q\x01\x92`\0\x94[\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x84Q\x01\x86\x10\x15a\x10^Ws\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFFa\n/\x87\x86a\x19)V[Q\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFFa\nS`\x02\x89\x01\x87a\x19)V[Q\x16\x90s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF``\x8C`\x04`@Q\x80\x94\x81\x93\x7F\t\x02\xF1\xAC\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x83R\x16Z\xFA\x90\x81\x15a\x02$W`\0\x90`\0\x92a\x10;W[Pm\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x91\x82\x16\x91\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x85\x16\x83\x03a\x105W[`@Q\x7Fp\xA0\x821\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81Rs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x8E\x16`\x04\x82\x01R` \x81`$\x81\x87Z\xFA\x80\x15a\x02$W\x82\x91`\0\x91a\x10\0W[P\x03s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFFa\x0Ba`\x01\x8D\x01\x8Ba\x19)V[Q\x16\x91\x80\x15\x91\x82\x80\x15a\x0F\xF8W[a\x0F\xC7W`\xFFa\x0C\x08a\x0B\xC1\x86s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16`\0R\x7F\x82WZ\xFF\xB1&\x0F\xF4\xD6,\x8D7\x16\xA5Z\xDB\xFBOH4\xD1\x7FL\xC7`\xB6|\xCC\xBC\xB7\xACj` R`@`\0 \x90V[T\x95s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16`\0R\x7F\x82WZ\xFF\xB1&\x0F\xF4\xD6,\x8D7\x16\xA5Z\xDB\xFBOH4\xD1\x7FL\xC7`\xB6|\xCC\xBC\xB7\xACi` R`@`\0 \x90V[T\x16\x15a\x0F\x96Wa\x03\xE8\x93\x84\x81\x06a\x0F\x10W\x84\x90\x04\x84\x03\x90\x84\x82\x11a\x0E\xE1Wa\x0C;\x91a\x0C4\x91a\x1AuV[\x80\x95a\x1AuV[\x91\x81\x84\x81\x02\x04\x84\x14\x17\x15a\x0E\xE1Ws\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x93a\x0Cs\x93a\x0Cm\x92\x02a\x19vV[\x90a\x1A<V[\x93[\x16\x03a\x0E\xD9W`\0\x91\x99[\x86\x88\x10\x15a\x0E\xB9Wa\r>` s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFFa\x0C\xAF`\x03\x8C\x01\x8Aa\x19)V[Q\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFFa\x0C\xD3`\x04\x8D\x01\x8Ba\x19)V[Q\x16\x90a\x0C\xE0\x82\x87a\x1A\x88V[P\x95`@Q\x80\x95\x81\x94\x82\x93\x7F\xE6\xA49\x05\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x84R`\x04\x84\x01\x90` \x90\x93\x92\x93`@\x83\x01\x94s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x92\x16\x84R\x16\x91\x01RV[\x03\x91Z\xFA\x90\x81\x15a\x02$W`\0\x91a\x0E\x9AW[P\x91[\x9A`@Q\x90\x81` \x81\x01\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF` \x84\x01\x11\x17a\x05\x87W` \x82\x01`@R`\0\x82Rs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x16;\x15a\x02\x18W\x93\x90`@Q\x94\x85\x92\x7F\x02,\r\x9F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x84R`\x04\x84\x01R`$\x83\x01Rs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x84\x16`D\x83\x01R`\x80`d\x83\x01R\x80Q\x90\x81`\x84\x84\x01R`\0[\x82\x81\x10a\x0E\x82WPP\x91\x81`\0s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x95\x83\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0`\x1F`\xA4\x93\x86\x85\x82\x86\x01\x01R\x01\x16\x81\x01\x03\x01\x93\x16Z\xF1\x91\x82\x15a\x02$W`\x02\x92a\x0EsW[P\x95\x01\x94\x97a\t\xE5V[a\x0E|\x90a\x18\x10V[\x8Aa\x0EiV[` \x82\x82\x01\x81\x01Q`\xA4\x89\x84\x01\x01R\x87\x94P\x01a\r\xFEV[a\x0E\xB3\x91P` =` \x11a\x05\x80Wa\x05r\x81\x83a\x18@V[\x8Ca\rQV[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x89\x16\x91P`\0a\rTV[`\0\x99a\x0C\x80V[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\0R`\x11`\x04R`$`\0\xFD[\x93P`d\x84\x06a\x0FwW`da'\x10\x94\x04\x84\x03\x90\x84\x82\x11a\x0E\xE1Wa\x0F?\x91a\x0F8\x91a\x1AuV[\x94\x85a\x1AuV[\x91\x81\x84\x81\x02\x04\x84\x14\x17\x15a\x0E\xE1Ws\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x93a\x0Fq\x93a\x0Cm\x92\x02a\x19vV[\x93a\x0CuV[`\nb\x01\x86\xA0\x94\x04\x84\x03\x90\x84\x82\x11a\x0E\xE1Wa\x0F?\x91a\x0F8\x91a\x1AuV[`$`@Q\x7F\x94\x8A\xC5\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R` `\x04\x82\x01R\xFD[`$`@Q\x7F\x94\x8A\xC5\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`+`\x04\x82\x01R\xFD[P\x84\x15a\x0BoV[\x91PP` \x81=` \x11a\x10-W[\x81a\x10\x1C` \x93\x83a\x18@V[\x81\x01\x03\x12a\x02\x18W\x81\x90Q\x8Fa\x0B=V[=\x91Pa\x10\x0FV[\x90a\n\xE2V[\x90Pa\x10V\x91P``=``\x11a\x02^Wa\x02N\x81\x83a\x18@V[P\x90\x8Da\n\xAFV[P\x95\x93P\x95PPPa\x10\x89s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFFa\x10\x8E\x93\x16\x85a\x1C\xFFV[a\x19=V[\x80\x15a\x10\xBFWs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF``\x93`@Q\x93\x84R\x16` \x83\x01R`@\x82\x01R\xF3[`$`@Q\x7F\x94\x8A\xC5\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`0`\x04\x82\x01R\xFD[a\x11\x12\x91s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x86\x16\x90\x87a\x1A\xB0V[\x84\x80a\x08\xDBV[a\x113\x91\x94P` =` \x11a\x05\x80Wa\x05r\x81\x83a\x18@V[\x92\x85a\x08\xD1V[\x90\x92\x91`\x045a\x14\xCCW[P`\xFFa\x11\x93`$5s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16`\0R\x7F\x82WZ\xFF\xB1&\x0F\xF4\xD6,\x8D7\x16\xA5Z\xDB\xFBOH4\xD1\x7FL\xC7`\xB6|\xCC\xBC\xB7\xACi` R`@`\0 \x90V[T\x16\x15a\x0F\x96Wa\x11\xA3\x82a\x1D\x1FV[\x15a\x13\x93W[\x80Q\x90\x81\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x01\x11a\x0E\xE1Wa\x12k`\0\x91s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFFa\x12\x1D\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x96\x01\x83a\x19)V[Q\x16\x95`@Q\x94\x85\x93\x84\x93\x7F8\xED\x179\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x85R`\x045`\x04\x86\x01R`\x01`$\x86\x01R`\xA0`D\x86\x01R`\xA4\x85\x01\x90a\x17\xC6V[\x91\x16`d\x83\x01R\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF`\x84\x83\x01R\x03\x81\x83s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF`$5\x16Z\xF1\x90\x81\x15a\x02$W`\0\x91a\x13\x01W[P\x80Q\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x01\x90\x81\x11a\x0E\xE1Wa\x12\xFB\x91a\x19)V[Qa\x10\x8EV[\x90P=\x80`\0\x83>a\x13\x13\x81\x83a\x18@V[\x81\x01\x90` \x81\x83\x03\x12a\x02\x18W\x80Q\x90g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11a\x02\x18W\x01\x90\x80`\x1F\x83\x01\x12\x15a\x02\x18W\x81Qa\x13J\x81a\x18\x81V[\x92a\x13X`@Q\x94\x85a\x18@V[\x81\x84R` \x80\x85\x01\x92`\x05\x1B\x82\x01\x01\x92\x83\x11a\x02\x18W` \x01\x90[\x82\x82\x10a\x13\x83WPPP\x83a\x12\xC5V[\x81Q\x81R` \x91\x82\x01\x91\x01a\x13sV[`@Q\x7F\xDDb\xED>\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R0`\x04\x82\x01R`$\x805s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90\x82\x01R` \x81`D\x81\x86Z\xFA\x80\x15a\x02$Wa\x14\xA1W[P`$5`\x14R\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80`4Ro\t^\xA7\xB3\0\0\0\0\0\0\0\0\0\0\0\0\x80`\0R` `\0`D`\x10\x82\x88Z\xF1=\x15`\x01`\0Q\x14\x17\x16\x15a\x14ZW[PP`\0`4Ra\x11\xA9V[`\0`4R`\0R`\0\x80`D`\x10\x82\x87Z\xF1P`4R` `\0`D`\x10\x82\x86Z\xF1=\x15`\x01`\0Q\x14\x17\x16\x15a\x14\x93W\x83\x80a\x14NV[c>?\x8Fs`\0R`\x04`\x1C\xFD[` \x90\x81=\x83\x11a\x14\xC5W[a\x14\xB7\x81\x83a\x18@V[\x81\x01\x03\x12a\x02\x18W\x83a\x13\xF1V[P=a\x14\xADV[a\x14\xDC\x90`\x045\x900\x90\x85a\x1A\xB0V[\x83a\x11EV[`\x02\x81\x03a\x14\xF3WPP0\x90a\x07\xF5V[a\x14\xFC\x90a\x1D\x1FV[\x15a\x15\tWP3\x90a\x07\xF5V[\x90a\x07\xF5V[`\x02\x03a\x15\x1DW0\x92a\x07\xE8V[`$`@Q\x7F\x94\x8A\xC5\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`&`\x04\x82\x01R\xFD[\x825s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x16\x81\x03a\x02\x18W\x81R` \x92\x83\x01\x92\x01a\x07pV[4a\x02\x18W``\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFC6\x01\x12a\x02\x18Wa\x15\xB2a\x17\xA3V[\x90`$\x805\x92`D5s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x92\x16\x90\x7FWO+\xA3\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x85R` \x94\x85\x81`\x04\x81\x86Z\xFA\x80\x15a\x02$W\x87\x91`\0\x91a\x17pW[P\x91\x82a\x16&\x93\x82\x11a\x17hW[Pa\x19=V[\x91a\x160\x83a\x18\x81V[\x95a\x16>`@Q\x97\x88a\x18@V[\x83\x87R\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0a\x16k\x85a\x18\x81V[\x016\x87\x89\x017`\0[\x84\x81\x10a\x16\x92W`@Q\x87\x81R\x80a\x16\x8E\x81\x8A\x01\x8Ba\x17\xC6V[\x03\x90\xF3[a\x16\x9C\x81\x83a\x19vV[`@Q\x90\x7F\x1E=\xD1\x8B\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x82R`\x04\x82\x01R\x87\x81\x88\x81\x88Z\xFA\x90\x81\x15a\x02$W`\0\x91a\x17KW[P\x83a\x16\xEA\x83\x8Ba\x19)V[\x91\x16\x90R\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x14a\x17\x1DW`\x01\x01a\x16tV[\x85\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\0R`\x11`\x04R`\0\xFD[a\x17b\x91P\x88=\x8A\x11a\x05\x80Wa\x05r\x81\x83a\x18@V[\x89a\x16\xDEV[\x90P\x88a\x16 V[\x80\x92P\x87\x80\x92P=\x83\x11a\x17\x9CW[a\x17\x89\x81\x83a\x18@V[\x81\x01\x03\x12a\x02\x18WQ\x86\x90a\x16&a\x16\x12V[P=a\x17\x7FV[`\x045\x90s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x16\x82\x03a\x02\x18WV[\x90\x81Q\x80\x82R` \x80\x80\x93\x01\x93\x01\x91`\0[\x82\x81\x10a\x17\xE6WPPPP\x90V[\x83Qs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x85R\x93\x81\x01\x93\x92\x81\x01\x92`\x01\x01a\x17\xD8V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x05\x87W`@RV[``\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x05\x87W`@RV[\x90`\x1F\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x91\x01\x16\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x05\x87W`@RV[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x05\x87W`\x05\x1B` \x01\x90V[\x90\x81Q\x80\x82R` \x80\x80\x93\x01\x93\x01\x91`\0[\x82\x81\x10a\x18\xB9WPPPP\x90V[\x83Q\x85R\x93\x81\x01\x93\x92\x81\x01\x92`\x01\x01a\x18\xABV[\x80Q\x15a\x18\xDAW` \x01\x90V[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\0R`2`\x04R`$`\0\xFD[\x80Q`\x01\x10\x15a\x18\xDAW`@\x01\x90V[\x80Q`\x02\x10\x15a\x18\xDAW``\x01\x90V[\x80Q\x82\x10\x15a\x18\xDAW` \x91`\x05\x1B\x01\x01\x90V[\x91\x90\x82\x03\x91\x82\x11a\x0E\xE1WV[\x90\x81` \x91\x03\x12a\x02\x18WQs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x16\x81\x03a\x02\x18W\x90V[\x91\x90\x82\x01\x80\x92\x11a\x0E\xE1WV[`@Q\x90`\x80\x82\x01\x82\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x05\x87W`@R``\x80\x83\x81\x81R`\0` \x82\x01R`\0`@\x82\x01R\x01RV[`@Q\x90``\x82\x01\x82\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x05\x87W`@R`\0`@\x83``\x81R\x82` \x82\x01R\x01RV[Q\x90m\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x16\x82\x03a\x02\x18WV[\x90\x81``\x91\x03\x12a\x02\x18Wa\x1A\x1A\x81a\x19\xEBV[\x91`@a\x1A)` \x84\x01a\x19\xEBV[\x92\x01Qc\xFF\xFF\xFF\xFF\x81\x16\x81\x03a\x02\x18W\x90V[\x81\x15a\x1AFW\x04\x90V[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\0R`\x12`\x04R`$`\0\xFD[\x81\x81\x02\x92\x91\x81\x15\x91\x84\x04\x14\x17\x15a\x0E\xE1WV[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x81\x16\x90\x82\x16\x10\x15a\x1A\xACW\x91V[\x90\x91V[\x92\x91\x90s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x82\x160\x03a\x1A\xDEWPPa\x1A\xDC\x92a\x1A\xF2V[V[a\x1A\xEBa\x1A\xDC\x95\x94a\x1DpV[\x16\x92a\x1B\xC6V[\x90s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x900\x82\x14a\x1B\xC1Wa\x1B\x1A\x81a\x1D\x1FV[\x15a\x1B>WP`\0\x80\x80\x93Z\x93Z\xF1\x15a\x1B0WV[c\xB1-\x13\xEB`\0R`\x04`\x1C\xFD[\x82` \x92\x7F\x80\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\x10\x95\x14a\x1B\xAFW[`\x14R`4R`D`\0\x93\x84\x80\x93o\xA9\x05\x9C\xBB\0\0\0\0\0\0\0\0\0\0\0\0\x82RZ\xF1=\x15`\x01\x83Q\x14\x17\x16\x15a\x1B\xA2W`4RV[c\x90\xB8\xEC\x18\x90R`\x04`\x1C\xFD[\x90Pa\x1B\xBB0\x83a\x1C\xD0V[\x90a\x1BlV[PPPV[\x91s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x90\x81\x16\x91\x16\x81\x81\x14a\x1B\xF7Wa\x1B\xF1\x83a\x1D\x1FV[\x15a\x1B\xFDW[PPPPV[a\x1C\ta\x1C\x0F\x94a\x1DpV[\x92a\x1C\x18V[8\x80\x80\x80a\x1B\xF7V[\x91s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x80\x92\x16\x92\x16\x82\x81\x14a\x1C\xC9W\x81\x7Fj+3\x91\\\x87\xEB\xBD.zGR\x0F\xE4\xAA\xA6\xF0\xE1\x8E\xF6\xBD\xEB\xD6I\x15\xD7\xAE\xCE\xD0\x8DD\x81T\x16\x93\x84;\x15a\x02\x18W`\0\x94\x83\x86\x92`\x84\x95`@Q\x99\x8A\x98\x89\x97\x7F6\xC7\x85\x16\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x89R`\x04\x89\x01R`$\x88\x01R\x16`D\x86\x01R\x16`d\x84\x01RZ\xF1\x80\x15a\x02$Wa\x1C\xC0WPV[a\x1A\xDC\x90a\x18\x10V[PPPPPV[`$`\x10` \x93\x92\x84\x93`\x14Rop\xA0\x821\0\0\0\0\0\0\0\0\0\0\0\0`\0RZ\xFA`\x1F=\x11\x16` Q\x02\x90V[a\x1D\x08\x81a\x1D\x1FV[\x15a\x1D\x12WP1\x90V[\x90a\x1D\x1C\x91a\x1C\xD0V[\x90V[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xEE\xEE\xEE\xEE\xEE\xEE\xEE\xEE\xEE\xEE\xEE\xEE\xEE\xEE\xEE\xEE\xEE\xEE\xEE\xEE\x81\x14\x90\x81\x15a\x1DdW[\x81\x15a\x1D^WP\x90V[\x90P\x15\x90V[a\x10\x10\x81\x14\x91Pa\x1DTV[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x90\x81\x81\x11a\x1D\x91W\x16\x90V[`\x04`@Q\x7F\xC4\xBD\x89\xA9\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R\xFD\xFE\xA2dipfsX\"\x12 \x08\xFASiZ\xB0\xD7\xCA\x8CU{\xE6\x85\x95\x8B'\x9A\xBC+(.\x0CkF\x08h\x81\xC0i\x8E\"4dsolcC\0\x08\x13\x003";
    /// The deployed bytecode of the contract.
    pub static UNIV2FACET_DEPLOYED_BYTECODE: ::ethers::core::types::Bytes = ::ethers::core::types::Bytes::from_static(
        __DEPLOYED_BYTECODE,
    );
    pub struct UniV2Facet<M>(::ethers::contract::Contract<M>);
    impl<M> ::core::clone::Clone for UniV2Facet<M> {
        fn clone(&self) -> Self {
            Self(::core::clone::Clone::clone(&self.0))
        }
    }
    impl<M> ::core::ops::Deref for UniV2Facet<M> {
        type Target = ::ethers::contract::Contract<M>;
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl<M> ::core::ops::DerefMut for UniV2Facet<M> {
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl<M> ::core::fmt::Debug for UniV2Facet<M> {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple(::core::stringify!(UniV2Facet)).field(&self.address()).finish()
        }
    }
    impl<M: ::ethers::providers::Middleware> UniV2Facet<M> {
        /// Creates a new contract instance with the specified `ethers` client at
        /// `address`. The contract derefs to a `ethers::Contract` object.
        pub fn new<T: Into<::ethers::core::types::Address>>(
            address: T,
            client: ::std::sync::Arc<M>,
        ) -> Self {
            Self(
                ::ethers::contract::Contract::new(
                    address.into(),
                    UNIV2FACET_ABI.clone(),
                    client,
                ),
            )
        }
        /// Constructs the general purpose `Deployer` instance based on the provided constructor arguments and sends it.
        /// Returns a new instance of a deployer that returns an instance of this contract after sending the transaction
        ///
        /// Notes:
        /// - If there are no constructor arguments, you should pass `()` as the argument.
        /// - The default poll duration is 7 seconds.
        /// - The default number of confirmations is 1 block.
        ///
        ///
        /// # Example
        ///
        /// Generate contract bindings with `abigen!` and deploy a new contract instance.
        ///
        /// *Note*: this requires a `bytecode` and `abi` object in the `greeter.json` artifact.
        ///
        /// ```ignore
        /// # async fn deploy<M: ethers::providers::Middleware>(client: ::std::sync::Arc<M>) {
        ///     abigen!(Greeter, "../greeter.json");
        ///
        ///    let greeter_contract = Greeter::deploy(client, "Hello world!".to_string()).unwrap().send().await.unwrap();
        ///    let msg = greeter_contract.greet().call().await.unwrap();
        /// # }
        /// ```
        pub fn deploy<T: ::ethers::core::abi::Tokenize>(
            client: ::std::sync::Arc<M>,
            constructor_args: T,
        ) -> ::core::result::Result<
            ::ethers::contract::builders::ContractDeployer<M, Self>,
            ::ethers::contract::ContractError<M>,
        > {
            let factory = ::ethers::contract::ContractFactory::new(
                UNIV2FACET_ABI.clone(),
                UNIV2FACET_BYTECODE.clone().into(),
                client,
            );
            let deployer = factory.deploy(constructor_args)?;
            let deployer = ::ethers::contract::ContractDeployer::new(deployer);
            Ok(deployer)
        }
        ///Calls the contract's `uniV2PoolNum` (0x6218582f) function
        pub fn uni_v2_pool_num(
            &self,
            factory: ::ethers::core::types::Address,
        ) -> ::ethers::contract::builders::ContractCall<M, ::ethers::core::types::U256> {
            self.0
                .method_hash([98, 24, 88, 47], factory)
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `uniV2PoolParams` (0x68341285) function
        pub fn uni_v2_pool_params(
            &self,
            pool: ::ethers::core::types::Address,
        ) -> ::ethers::contract::builders::ContractCall<M, UniV2PoolParamsResponse> {
            self.0
                .method_hash([104, 52, 18, 133], pool)
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `uniV2PoolState` (0x97389e6c) function
        pub fn uni_v2_pool_state(
            &self,
            pool: ::ethers::core::types::Address,
        ) -> ::ethers::contract::builders::ContractCall<M, UniV2PoolStateResponse> {
            self.0
                .method_hash([151, 56, 158, 108], pool)
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `uniV2Pools` (0x4cae21dc) function
        pub fn uni_v2_pools(
            &self,
            factory: ::ethers::core::types::Address,
            start: ::ethers::core::types::U256,
            end: ::ethers::core::types::U256,
        ) -> ::ethers::contract::builders::ContractCall<
            M,
            ::std::vec::Vec<::ethers::core::types::Address>,
        > {
            self.0
                .method_hash([76, 174, 33, 220], (factory, start, end))
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `uniV2SwapExactInput` (0x53e9d16c) function
        pub fn uni_v2_swap_exact_input(
            &self,
            amount_in: ::ethers::core::types::U256,
            router: ::ethers::core::types::Address,
            path: ::std::vec::Vec<::ethers::core::types::Address>,
            recipient: ::ethers::core::types::Address,
            payer: ::ethers::core::types::Address,
        ) -> ::ethers::contract::builders::ContractCall<
            M,
            (
                ::ethers::core::types::Address,
                ::ethers::core::types::Address,
                ::ethers::core::types::U256,
            ),
        > {
            self.0
                .method_hash(
                    [83, 233, 209, 108],
                    (amount_in, router, path, recipient, payer),
                )
                .expect("method not found (this should never happen)")
        }
    }
    impl<M: ::ethers::providers::Middleware> From<::ethers::contract::Contract<M>>
    for UniV2Facet<M> {
        fn from(contract: ::ethers::contract::Contract<M>) -> Self {
            Self::new(contract.address(), contract.client())
        }
    }
    ///Custom Error type `GenericError` with signature `GenericError(uint256)` and selector `0x948ac503`
    #[derive(
        Clone,
        ::ethers::contract::EthError,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[etherror(name = "GenericError", abi = "GenericError(uint256)")]
    pub struct GenericError {
        pub error_code: ::ethers::core::types::U256,
    }
    ///Custom Error type `UnsafeCast` with signature `UnsafeCast()` and selector `0xc4bd89a9`
    #[derive(
        Clone,
        ::ethers::contract::EthError,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[etherror(name = "UnsafeCast", abi = "UnsafeCast()")]
    pub struct UnsafeCast;
    ///Container type for all of the contract's custom errors
    #[derive(Clone, ::ethers::contract::EthAbiType, Debug, PartialEq, Eq, Hash)]
    pub enum UniV2FacetErrors {
        GenericError(GenericError),
        UnsafeCast(UnsafeCast),
        /// The standard solidity revert string, with selector
        /// Error(string) -- 0x08c379a0
        RevertString(::std::string::String),
    }
    impl ::ethers::core::abi::AbiDecode for UniV2FacetErrors {
        fn decode(
            data: impl AsRef<[u8]>,
        ) -> ::core::result::Result<Self, ::ethers::core::abi::AbiError> {
            let data = data.as_ref();
            if let Ok(decoded)
                = <::std::string::String as ::ethers::core::abi::AbiDecode>::decode(
                    data,
                ) {
                return Ok(Self::RevertString(decoded));
            }
            if let Ok(decoded)
                = <GenericError as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::GenericError(decoded));
            }
            if let Ok(decoded)
                = <UnsafeCast as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::UnsafeCast(decoded));
            }
            Err(::ethers::core::abi::Error::InvalidData.into())
        }
    }
    impl ::ethers::core::abi::AbiEncode for UniV2FacetErrors {
        fn encode(self) -> ::std::vec::Vec<u8> {
            match self {
                Self::GenericError(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::UnsafeCast(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::RevertString(s) => ::ethers::core::abi::AbiEncode::encode(s),
            }
        }
    }
    impl ::ethers::contract::ContractRevert for UniV2FacetErrors {
        fn valid_selector(selector: [u8; 4]) -> bool {
            match selector {
                [0x08, 0xc3, 0x79, 0xa0] => true,
                _ if selector
                    == <GenericError as ::ethers::contract::EthError>::selector() => true,
                _ if selector
                    == <UnsafeCast as ::ethers::contract::EthError>::selector() => true,
                _ => false,
            }
        }
    }
    impl ::core::fmt::Display for UniV2FacetErrors {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            match self {
                Self::GenericError(element) => ::core::fmt::Display::fmt(element, f),
                Self::UnsafeCast(element) => ::core::fmt::Display::fmt(element, f),
                Self::RevertString(s) => ::core::fmt::Display::fmt(s, f),
            }
        }
    }
    impl ::core::convert::From<::std::string::String> for UniV2FacetErrors {
        fn from(value: String) -> Self {
            Self::RevertString(value)
        }
    }
    impl ::core::convert::From<GenericError> for UniV2FacetErrors {
        fn from(value: GenericError) -> Self {
            Self::GenericError(value)
        }
    }
    impl ::core::convert::From<UnsafeCast> for UniV2FacetErrors {
        fn from(value: UnsafeCast) -> Self {
            Self::UnsafeCast(value)
        }
    }
    ///Container type for all input parameters for the `uniV2PoolNum` function with signature `uniV2PoolNum(address)` and selector `0x6218582f`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "uniV2PoolNum", abi = "uniV2PoolNum(address)")]
    pub struct UniV2PoolNumCall {
        pub factory: ::ethers::core::types::Address,
    }
    ///Container type for all input parameters for the `uniV2PoolParams` function with signature `uniV2PoolParams(address)` and selector `0x68341285`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "uniV2PoolParams", abi = "uniV2PoolParams(address)")]
    pub struct UniV2PoolParamsCall {
        pub pool: ::ethers::core::types::Address,
    }
    ///Container type for all input parameters for the `uniV2PoolState` function with signature `uniV2PoolState(address)` and selector `0x97389e6c`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "uniV2PoolState", abi = "uniV2PoolState(address)")]
    pub struct UniV2PoolStateCall {
        pub pool: ::ethers::core::types::Address,
    }
    ///Container type for all input parameters for the `uniV2Pools` function with signature `uniV2Pools(address,uint256,uint256)` and selector `0x4cae21dc`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "uniV2Pools", abi = "uniV2Pools(address,uint256,uint256)")]
    pub struct UniV2PoolsCall {
        pub factory: ::ethers::core::types::Address,
        pub start: ::ethers::core::types::U256,
        pub end: ::ethers::core::types::U256,
    }
    ///Container type for all input parameters for the `uniV2SwapExactInput` function with signature `uniV2SwapExactInput(uint256,address,address[],address,address)` and selector `0x53e9d16c`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(
        name = "uniV2SwapExactInput",
        abi = "uniV2SwapExactInput(uint256,address,address[],address,address)"
    )]
    pub struct UniV2SwapExactInputCall {
        pub amount_in: ::ethers::core::types::U256,
        pub router: ::ethers::core::types::Address,
        pub path: ::std::vec::Vec<::ethers::core::types::Address>,
        pub recipient: ::ethers::core::types::Address,
        pub payer: ::ethers::core::types::Address,
    }
    ///Container type for all of the contract's call
    #[derive(Clone, ::ethers::contract::EthAbiType, Debug, PartialEq, Eq, Hash)]
    pub enum UniV2FacetCalls {
        UniV2PoolNum(UniV2PoolNumCall),
        UniV2PoolParams(UniV2PoolParamsCall),
        UniV2PoolState(UniV2PoolStateCall),
        UniV2Pools(UniV2PoolsCall),
        UniV2SwapExactInput(UniV2SwapExactInputCall),
    }
    impl ::ethers::core::abi::AbiDecode for UniV2FacetCalls {
        fn decode(
            data: impl AsRef<[u8]>,
        ) -> ::core::result::Result<Self, ::ethers::core::abi::AbiError> {
            let data = data.as_ref();
            if let Ok(decoded)
                = <UniV2PoolNumCall as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::UniV2PoolNum(decoded));
            }
            if let Ok(decoded)
                = <UniV2PoolParamsCall as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::UniV2PoolParams(decoded));
            }
            if let Ok(decoded)
                = <UniV2PoolStateCall as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::UniV2PoolState(decoded));
            }
            if let Ok(decoded)
                = <UniV2PoolsCall as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::UniV2Pools(decoded));
            }
            if let Ok(decoded)
                = <UniV2SwapExactInputCall as ::ethers::core::abi::AbiDecode>::decode(
                    data,
                ) {
                return Ok(Self::UniV2SwapExactInput(decoded));
            }
            Err(::ethers::core::abi::Error::InvalidData.into())
        }
    }
    impl ::ethers::core::abi::AbiEncode for UniV2FacetCalls {
        fn encode(self) -> Vec<u8> {
            match self {
                Self::UniV2PoolNum(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::UniV2PoolParams(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::UniV2PoolState(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::UniV2Pools(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::UniV2SwapExactInput(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
            }
        }
    }
    impl ::core::fmt::Display for UniV2FacetCalls {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            match self {
                Self::UniV2PoolNum(element) => ::core::fmt::Display::fmt(element, f),
                Self::UniV2PoolParams(element) => ::core::fmt::Display::fmt(element, f),
                Self::UniV2PoolState(element) => ::core::fmt::Display::fmt(element, f),
                Self::UniV2Pools(element) => ::core::fmt::Display::fmt(element, f),
                Self::UniV2SwapExactInput(element) => {
                    ::core::fmt::Display::fmt(element, f)
                }
            }
        }
    }
    impl ::core::convert::From<UniV2PoolNumCall> for UniV2FacetCalls {
        fn from(value: UniV2PoolNumCall) -> Self {
            Self::UniV2PoolNum(value)
        }
    }
    impl ::core::convert::From<UniV2PoolParamsCall> for UniV2FacetCalls {
        fn from(value: UniV2PoolParamsCall) -> Self {
            Self::UniV2PoolParams(value)
        }
    }
    impl ::core::convert::From<UniV2PoolStateCall> for UniV2FacetCalls {
        fn from(value: UniV2PoolStateCall) -> Self {
            Self::UniV2PoolState(value)
        }
    }
    impl ::core::convert::From<UniV2PoolsCall> for UniV2FacetCalls {
        fn from(value: UniV2PoolsCall) -> Self {
            Self::UniV2Pools(value)
        }
    }
    impl ::core::convert::From<UniV2SwapExactInputCall> for UniV2FacetCalls {
        fn from(value: UniV2SwapExactInputCall) -> Self {
            Self::UniV2SwapExactInput(value)
        }
    }
    ///Container type for all return fields from the `uniV2PoolNum` function with signature `uniV2PoolNum(address)` and selector `0x6218582f`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct UniV2PoolNumReturn(pub ::ethers::core::types::U256);
    ///Container type for all return fields from the `uniV2PoolParams` function with signature `uniV2PoolParams(address)` and selector `0x68341285`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct UniV2PoolParamsReturn(pub UniV2PoolParamsResponse);
    ///Container type for all return fields from the `uniV2PoolState` function with signature `uniV2PoolState(address)` and selector `0x97389e6c`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct UniV2PoolStateReturn(pub UniV2PoolStateResponse);
    ///Container type for all return fields from the `uniV2Pools` function with signature `uniV2Pools(address,uint256,uint256)` and selector `0x4cae21dc`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct UniV2PoolsReturn(pub ::std::vec::Vec<::ethers::core::types::Address>);
    ///Container type for all return fields from the `uniV2SwapExactInput` function with signature `uniV2SwapExactInput(uint256,address,address[],address,address)` and selector `0x53e9d16c`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct UniV2SwapExactInputReturn {
        pub input_token: ::ethers::core::types::Address,
        pub output_token: ::ethers::core::types::Address,
        pub amount_out: ::ethers::core::types::U256,
    }
    ///`UniV2PoolParamsResponse(uint256[],address,address,address[])`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct UniV2PoolParamsResponse {
        pub fees: ::std::vec::Vec<::ethers::core::types::U256>,
        pub pool: ::ethers::core::types::Address,
        pub factory: ::ethers::core::types::Address,
        pub token_list: ::std::vec::Vec<::ethers::core::types::Address>,
    }
    ///`UniV2PoolStateResponse(uint256[],uint256,bool)`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct UniV2PoolStateResponse {
        pub balances: ::std::vec::Vec<::ethers::core::types::U256>,
        pub total_supply: ::ethers::core::types::U256,
        pub paused: bool,
    }
}
